#version 450
int SHADING_RATE_MAP[3][3] = {{5,7,7},{6, 8, 10},{6,9,11}};
 
layout (binding = 0, r8i) uniform iimage2D u_vrs; 
layout (binding = 1, rgba16f) uniform image2D u_color; 
layout (binding = 2, r32f) uniform image2D u_last_depth; 
layout (binding = 3, r32f) uniform image2D u_depth; 
layout (binding = 4) uniform ProjectionView 
{
	mat4 last;
	mat4 now;
} u_pv;
 
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#define RESOLUTION ivec2(1280, 720)
#define TILE_SIZE 16

#define LUMA_WEIGHT vec3(0.299, 0.587, 0.114);

#define T 0.15
#define L 0.05
#define K 10

void main(void){
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    ivec2 motion_vector[TILE_SIZE][TILE_SIZE];
    float luma_avg = 0;
    for (int i = 0; i < TILE_SIZE; ++i) {
        for (int j = 0; j < TILE_SIZE; ++j) {
            ivec2 uv = pos * TILE_SIZE + ivec2(i, j);

            float depth = imageLoad(u_depth, uv).r / 1.01;
            vec2 clip_coord = (2.0 * uv / RESOLUTION) - 1.0;
            vec4 clip_pos = vec4(clip_coord, depth * 2.0 - 1.0, 1.0);
            vec4 world_pos = inverse(u_pv.now) * clip_pos;

            vec4 l_clip_pos = u_pv.last * world_pos;
            l_clip_pos = l_clip_pos / l_clip_pos.w;
            ivec2 l_uv = ivec2((l_clip_pos.xy + 1.0) / 2.0 * RESOLUTION);
            float l_depth = (l_clip_pos.z + 1.0) / 2.0;

            float d_l_depth = imageLoad(u_last_depth, l_uv).r;

            motion_vector[i][j] = abs(d_l_depth - l_depth) > 0.01? RESOLUTION : l_uv - uv;
            imageStore(u_color, uv, vec4(motion_vector[i][j].x / float(RESOLUTION.x), motion_vector[i][j].y / float(RESOLUTION.y), 0, 0));
        }
    }
}